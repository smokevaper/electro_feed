from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, session
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import requests
import json
from datetime import datetime

{% if current_user.is_authenticated %}
<h2>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</h2>
<!-- –î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ -->
{% for order in orders %}
    <div>
        <p>–ó–∞–∫–∞–∑ ID: {{ order.id }}</p>
        <p>–°—É–º–º–∞: {{ order.total_price }}‚Ç∏</p>
    </div>
{% endfor %}
{% endif %}

order_text = f"–ù–∏–∫: {current_user.username}, –ó–∞–∫–∞–∑: {order.id}, –°—É–º–º–∞: {order.total_price}‚Ç∏"

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-here'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///shop.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(120), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    orders = db.relationship('Order', backref='user', lazy=True)

class Category(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False, unique=True)
    display_name = db.Column(db.String(100), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)
    price_tenge = db.Column(db.Float, nullable=False)
    price_rub = db.Column(db.Float, nullable=False)
    category = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text)
    specs = db.Column(db.Text)

class CartItem(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False, default=1)
    product = db.relationship('Product', backref='cart_items')

class Order(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    total_price = db.Column(db.Float, nullable=False)
    country = db.Column(db.String(100), nullable=False)
    city = db.Column(db.String(100), nullable=False)
    address = db.Column(db.String(200), nullable=False)
    phone = db.Column(db.String(20))
    status = db.Column(db.String(50), default='–Ω–æ–≤—ã–π')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    items = db.relationship('OrderItem', backref='order', lazy=True)

class OrderItem(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    order_id = db.Column(db.Integer, db.ForeignKey('order.id'), nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    price = db.Column(db.Float, nullable=False)
    product = db.relationship('Product')

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
def admin_required(f):
    from functools import wraps
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated or not current_user.is_admin:
            flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
            return redirect(url_for('index'))
        return f(*args, **kwargs)
    return decorated_function

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
def send_telegram_message(message):
    bot_token = "7474534895:AAEdMCuLAQx8sel53we8lGyh9N_GrhiEMDY"
    chat_id = "@e_f_zakazi"  # –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª

    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, data=data)
        if response.status_code == 200:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WhatsApp (—á–µ—Ä–µ–∑ API)
def send_whatsapp_message(message):
    # –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω API –∫–ª—é—á –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ WhatsApp API
    # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∫–æ–¥, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API
    pass

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    products = Product.query.all()
    categories = Category.query.all()
    cart_count = 0
    if current_user.is_authenticated:
        cart_count = CartItem.query.filter_by(user_id=current_user.id).count()
    return render_template('index.html', products=products, categories=categories, cart_count=cart_count)

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']

        if User.query.filter_by(username=username).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return redirect(url_for('register'))

        if User.query.filter_by(email=email).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return redirect(url_for('register'))

        user = User(
            username=username,
            email=email,
            password_hash=generate_password_hash(password)
        )
        db.session.add(user)
        db.session.commit()

        login_user(user)
        return redirect(url_for('index'))

    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()

        if user and check_password_hash(user.password_hash, password):
            login_user(user)
            return redirect(url_for('index'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')

    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

@app.route('/add_to_cart/<int:product_id>')
@login_required
def add_to_cart(product_id):
    existing_item = CartItem.query.filter_by(user_id=current_user.id, product_id=product_id).first()

    if existing_item:
        existing_item.quantity += 1
    else:
        cart_item = CartItem(user_id=current_user.id, product_id=product_id, quantity=1)
        db.session.add(cart_item)

    db.session.commit()
    flash('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')
    return redirect(url_for('index'))

@app.route('/cart')
@login_required
def cart():
    cart_items = CartItem.query.filter_by(user_id=current_user.id).all()
    total = sum(item.product.price_tenge * item.quantity for item in cart_items)
    return render_template('cart.html', cart_items=cart_items, total=total)

@app.route('/remove_from_cart/<int:item_id>')
@login_required
def remove_from_cart(item_id):
    item = CartItem.query.get_or_404(item_id)
    if item.user_id == current_user.id:
        db.session.delete(item)
        db.session.commit()
    return redirect(url_for('cart'))

@app.route('/checkout', methods=['GET', 'POST'])
@login_required
def checkout():
    cart_items = CartItem.query.filter_by(user_id=current_user.id).all()

    if not cart_items:
        flash('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!')
        return redirect(url_for('cart'))

    if request.method == 'POST':
        country = request.form['country']
        city = request.form['city']
        address = request.form['address']
        phone = request.form['phone']

        total_price = sum(item.product.price_tenge * item.quantity for item in cart_items)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            user_id=current_user.id,
            total_price=total_price,
            country=country,
            city=city,
            address=address,
            phone=phone
        )
        db.session.add(order)
        db.session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–∫–∞–∑–∞

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∫ –∑–∞–∫–∞–∑—É
        order_text = f"üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order.id}</b>\n\n"
        order_text += f"üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {current_user.username}\n"
        order_text += f"üìß <b>Email:</b> {current_user.email}\n"
        order_text += f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"
        order_text += f"üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
        order_text += f"üåç –°—Ç—Ä–∞–Ω–∞: {country}\n"
        order_text += f"üèô –ì–æ—Ä–æ–¥: {city}\n"
        order_text += f"üìÆ –ê–¥—Ä–µ—Å –°–î–≠–ö: {address}\n\n"
        order_text += "üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n"

        for item in cart_items:
            order_item = OrderItem(
                order_id=order.id,
                product_id=item.product_id,
                quantity=item.quantity,
                price=item.product.price_tenge
            )
            db.session.add(order_item)

            order_text += f"‚Ä¢ {item.product.name} x{item.quantity} = {item.product.price_tenge * item.quantity}‚Ç∏\n"

        order_text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total_price}‚Ç∏\n"
        order_text += f"üïê <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        for item in cart_items:
            db.session.delete(item)

        db.session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        send_telegram_message(order_text)
        send_whatsapp_message(order_text.replace('<b>', '').replace('</b>', ''))

        flash('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        return redirect(url_for('order_success', order_id=order.id))

    total = sum(item.product.price_tenge * item.quantity for item in cart_items)
    return render_template('checkout.html', cart_items=cart_items, total=total)

@app.route('/order_success/<int:order_id>')
@login_required
def order_success(order_id):
    order = Order.query.get_or_404(order_id)
    if order.user_id != current_user.id:
        return redirect(url_for('index'))
    return render_template('order_success.html', order=order)

@app.route('/my_orders')
@login_required
def my_orders():
    orders = Order.query.filter_by(user_id=current_user.id).order_by(Order.created_at.desc()).all()
    return render_template('my_orders.html', orders=orders)

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/admin')
@login_required
@admin_required
def admin_panel():
    products = Product.query.all()
    orders = Order.query.order_by(Order.created_at.desc()).all()
    return render_template('admin_panel.html', products=products, orders=orders)

@app.route('/admin/add_product', methods=['GET', 'POST'])
@login_required
@admin_required
def add_product():
    if request.method == 'POST':
        name = request.form['name']
        price_tenge = float(request.form['price_tenge'])
        price_rub = float(request.form['price_rub'])
        category = request.form['category']
        description = request.form['description']
        specs = request.form['specs']
        
        product = Product(
            name=name,
            price_tenge=price_tenge,
            price_rub=price_rub,
            category=category,
            description=description,
            specs=specs
        )
        db.session.add(product)
        db.session.commit()
        
        flash('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
        return redirect(url_for('admin_panel'))
    
    categories = Category.query.all()
    return render_template('add_product.html', categories=categories)

@app.route('/admin/edit_product/<int:product_id>', methods=['GET', 'POST'])
@login_required
@admin_required
def edit_product(product_id):
    product = Product.query.get_or_404(product_id)
    
    if request.method == 'POST':
        product.name = request.form['name']
        product.price_tenge = float(request.form['price_tenge'])
        product.price_rub = float(request.form['price_rub'])
        product.category = request.form['category']
        product.description = request.form['description']
        product.specs = request.form['specs']
        
        db.session.commit()
        flash('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
        return redirect(url_for('admin_panel'))
    
    categories = Category.query.all()
    return render_template('edit_product.html', product=product, categories=categories)

@app.route('/admin/delete_product/<int:product_id>')
@login_required
@admin_required
def delete_product(product_id):
    product = Product.query.get_or_404(product_id)
    db.session.delete(product)
    db.session.commit()
    flash('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!')
    return redirect(url_for('admin_panel'))

@app.route('/admin/orders')
@login_required
@admin_required
def admin_orders():
    orders = Order.query.order_by(Order.created_at.desc()).all()
    return render_template('admin_orders.html', orders=orders)

@app.route('/admin/update_order_status/<int:order_id>', methods=['POST'])
@login_required
@admin_required
def update_order_status(order_id):
    order = Order.query.get_or_404(order_id)
    new_status = request.form['status']
    order.status = new_status
    db.session.commit()
    flash(f'–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "{new_status}"')
    return redirect(url_for('admin_orders'))

@app.route('/admin/categories')
@login_required
@admin_required
def manage_categories():
    categories = Category.query.all()
    return render_template('manage_categories.html', categories=categories)

@app.route('/admin/add_category', methods=['POST'])
@login_required
@admin_required
def add_category():
    name = request.form['name']
    display_name = request.form['display_name']
    
    if Category.query.filter_by(name=name).first():
        flash('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
        return redirect(url_for('manage_categories'))
    
    category = Category(name=name, display_name=display_name)
    db.session.add(category)
    db.session.commit()
    flash('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    return redirect(url_for('manage_categories'))

@app.route('/admin/delete_category/<int:category_id>')
@login_required
@admin_required
def delete_category(category_id):
    category = Category.query.get_or_404(category_id)
    db.session.delete(category)
    db.session.commit()
    flash('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!')
    return redirect(url_for('manage_categories'))

def create_admin_account():
    """–°–æ–∑–¥–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin = User.query.filter_by(username='admin1').first()
    if not admin:
        admin = User(
            username='admin1',
            email='admin@electrofeed.com',
            password_hash=generate_password_hash('satzazamaga228gladiator19'),
            is_admin=True
        )
        db.session.add(admin)
        db.session.commit()
        print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin1")

def init_categories():
    if Category.query.count() == 0:
        categories_data = [
            {'name': 'pod-systems', 'display_name': '–ü–æ–¥ —Å–∏—Å—Ç–µ–º—ã'},
            {'name': 'coils', 'display_name': '–ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏/–ö–∞—Ä—Ç—Ä–∏–¥–∂–∏'},
            {'name': 'batteries', 'display_name': '–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã'},
            {'name': 'tanks', 'display_name': '–ë–∞–∫–∏/RTA'},
            {'name': 'electronics', 'display_name': '–≠–ª–µ–∫—Ç—Ä–æ —Ç–æ–≤–∞—Ä—ã'},
            {'name': 'hookah', 'display_name': '–ö–∞–ª—å—è–Ω—ã'},
            {'name': 'plates', 'display_name': '–ü–ª–∏—Ç–∫–∏'},
            {'name': 'accessories', 'display_name': '–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ'},
        ]
        
        for category_data in categories_data:
            category = Category(**category_data)
            db.session.add(category)
        
        db.session.commit()

def init_products():
    if Product.query.count() == 0:
        products_data = [
            # –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏
            {'name': '–ö–∞—Ä—Ç—Ä–∏–¥–∂–∏ XROS 0.6Œ©-1.2Œ©', 'price_tenge': 2500, 'price_rub': 470, 'category': 'coils', 'description': '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: 0.6Œ©, 0.8Œ©, 1.0Œ©, 1.2Œ©', 'specs': '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Vaporesso XROS —Å–µ—Ä–∏—è, –û–±—ä–µ–º: 2ml, –ú–∞—Ç–µ—Ä–∏–∞–ª: PCTG'},
            {'name': '–ö–∞—Ä—Ç—Ä–∏–¥–∂–∏ Xlim 0.4Œ©-1.0Œ©', 'price_tenge': 2500, 'price_rub': 470, 'category': 'coils', 'description': '–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: 0.4Œ©, 0.6Œ©, 0.8Œ©, 1.0Œ©', 'specs': '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: OXva Xlim —Å–µ—Ä–∏—è, –û–±—ä–µ–º: 2ml, –ú–∞—Ç–µ—Ä–∏–∞–ª: PCTG'},

            # –ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏
            {'name': '–ò—Å–ø–∞—Ä–∏—Ç–µ–ª—å Drag S/X', 'price_tenge': 2000, 'price_rub': 380, 'category': 'coils', 'description': '–ò—Å–ø–∞—Ä–∏—Ç–µ–ª—å –¥–ª—è Drag S/X', 'specs': '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Voopoo Drag S/X, –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞'},
            {'name': '–ò—Å–ø–∞—Ä–∏—Ç–µ–ª—å Pasito 2', 'price_tenge': 2000, 'price_rub': 380, 'category': 'coils', 'description': '–ò—Å–ø–∞—Ä–∏—Ç–µ–ª—å –¥–ª—è Pasito 2', 'specs': '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Smok Pasito 2, –û—Ç–ª–∏—á–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –≤–∫—É—Å–∞'},
            {'name': '–ò—Å–ø–∞—Ä–∏—Ç–µ–ª—å Manto AIO', 'price_tenge': 2000, 'price_rub': 380, 'category': 'coils', 'description': '–ò—Å–ø–∞—Ä–∏—Ç–µ–ª—å –¥–ª—è Manto AIO', 'specs': '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Rincoe Manto AIO, –î–æ–ª–≥–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã'},
            {'name': '–ò—Å–ø–∞—Ä–∏—Ç–µ–ª—å Aegis (–≤—Å–µ —Å–µ—Ä–∏–∏)', 'price_tenge': 2000, 'price_rub': 380, 'category': 'coils', 'description': '–ò—Å–ø–∞—Ä–∏—Ç–µ–ª—å –¥–ª—è Aegis', 'specs': '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: GeekVape Aegis –≤—Å–µ —Å–µ—Ä–∏–∏, –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'},

            # –í–µ–π–ø—ã
            {'name': 'Voopoo Drag 2', 'price_tenge': 25000, 'price_rub': 5000, 'category': 'pod-systems', 'description': '–ú–æ—â–Ω–æ—Å—Ç—å: –¥–æ 177W', 'specs': '–†–∞–∑–º–µ—Ä: 90√ó54√ó25mm, –ê–ö–ë: 2—Ö18650 (–Ω–µ –≤—Ö–æ–¥—è—Ç), –ó–∞—Ä—è–¥–∫–∞: USB Type-C, –ß–∏–ø: GENE.FIT'},
            {'name': 'GeekVape Aegis Legend 2', 'price_tenge': 25000, 'price_rub': 5000, 'category': 'pod-systems', 'description': '–ú–æ—â–Ω–æ—Å—Ç—å: –¥–æ 200W', 'specs': '–†–∞–∑–º–µ—Ä: 90√ó54√ó27mm, –ê–ö–ë: 2—Ö18650, –ó–∞—â–∏—Ç–∞: IP68, –ß–∏–ø: AS-200'},
            {'name': 'Voopoo Drag X Pro', 'price_tenge': 28000, 'price_rub': 5600, 'category': 'pod-systems', 'description': '–ú–æ—â–Ω–æ—Å—Ç—å: –¥–æ 100W', 'specs': '–ê–ö–ë: 1—Ö18650/21700, –ó–∞—Ä—è–¥–∫–∞: USB Type-C, –ß–∏–ø: GENE.TT 2.0'},
            {'name': 'Voopoo Drag S Pro', 'price_tenge': 22000, 'price_rub': 4400, 'category': 'pod-systems', 'description': '–ú–æ—â–Ω–æ—Å—Ç—å: –¥–æ 80W', 'specs': '–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è: 3200mAh, –ó–∞—Ä—è–¥–∫–∞: USB Type-C, –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω'},
            {'name': 'Eleaf Jelly Box 228W', 'price_tenge': 27900, 'price_rub': 5290, 'category': 'pod-systems', 'description': '–ú–æ—â–Ω–æ—Å—Ç—å: –¥–æ 228W', 'specs': '–ê–ö–ë: 2—Ö18650, –ú–∞—Ç–µ—Ä–∏–∞–ª: —Å–ø–ª–∞–≤ —Ü–∏–Ω–∫–∞, –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞'},
            {'name': 'Eleaf iStick Pico Mega 80W', 'price_tenge': 22500, 'price_rub': 4250, 'category': 'pod-systems', 'description': '–ú–æ—â–Ω–æ—Å—Ç—å: –¥–æ 80W', 'specs': '–ê–ö–ë: 1—Ö18650/26650, –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä, TC —Ä–µ–∂–∏–º'},
            {'name': 'Voopoo Argus MT', 'price_tenge': 19900, 'price_rub': 3990, 'category': 'pod-systems', 'description': '–ú–æ—â–Ω–æ—Å—Ç—å: –¥–æ 40W', 'specs': '–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è: 1500mAh, –ü–æ–¥ —Å–∏—Å—Ç–µ–º–∞, MTL/DTL'},
            {'name': 'Voopoo Argus GT II', 'price_tenge': 21490, 'price_rub': 4290, 'category': 'pod-systems', 'description': '–ú–æ—â–Ω–æ—Å—Ç—å: –¥–æ 200W', 'specs': '–ê–ö–ë: 2—Ö18650, –í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–π, –£–¥–∞—Ä–æ–ø—Ä–æ—á–Ω—ã–π'},
            {'name': 'Eleaf V-Grip 220W', 'price_tenge': 16900, 'price_rub': 3390, 'category': 'pod-systems', 'description': '–ú–æ—â–Ω–æ—Å—Ç—å: –¥–æ 220W', 'specs': '–ê–ö–ë: 2—Ö18650, –≠—Ä–≥–æ–Ω–æ–º–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω, TC —Ä–µ–∂–∏–º'},
            {'name': 'Voopoo Musket', 'price_tenge': 17890, 'price_rub': 3590, 'category': 'pod-systems', 'description': '–ú–æ—â–Ω–æ—Å—Ç—å: –¥–æ 120W', 'specs': '–ê–ö–ë: 1—Ö18650/20700/21700, –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å, –ü—Ä–æ—á–Ω—ã–π –∫–æ—Ä–ø—É—Å'},

            # –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã
            {'name': 'YLAID 18650 40A / 2200 mAh', 'price_tenge': 1190, 'price_rub': 230, 'category': 'batteries', 'description': '–ï–º–∫–æ—Å—Ç—å: 2200 mAh', 'specs': '–¢–æ–∫ —Ä–∞–∑—Ä—è–¥–∞: 40A, –†–∞–∑–º–µ—Ä: 18650, –¢–∏–ø: Li-ion'},
            {'name': 'YLAID 18650 60A / 3100 mAh', 'price_tenge': 1690, 'price_rub': 330, 'category': 'batteries', 'description': '–ï–º–∫–æ—Å—Ç—å: 3100 mAh', 'specs': '–¢–æ–∫ —Ä–∞–∑—Ä—è–¥–∞: 60A, –†–∞–∑–º–µ—Ä: 18650, –í—ã—Å–æ–∫–∞—è –µ–º–∫–æ—Å—Ç—å'},
            {'name': 'Sony VTC5A (–æ—Ä–∏–≥–∏–Ω–∞–ª)', 'price_tenge': 2190, 'price_rub': 420, 'category': 'batteries', 'description': '–ï–º–∫–æ—Å—Ç—å: 2600 mAh (–æ—Ä–∏–≥–∏–Ω–∞–ª)', 'specs': '–¢–æ–∫ —Ä–∞–∑—Ä—è–¥–∞: 35A, –†–∞–∑–º–µ—Ä: 18650, –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: Sony'},
            {'name': 'Sony VTC6 (–æ—Ä–∏–≥–∏–Ω–∞–ª)', 'price_tenge': 2490, 'price_rub': 480, 'category': 'batteries', 'description': '–ï–º–∫–æ—Å—Ç—å: 3000 mAh (–æ—Ä–∏–≥–∏–Ω–∞–ª)', 'specs': '–¢–æ–∫ —Ä–∞–∑—Ä—è–¥–∞: 30A, –†–∞–∑–º–µ—Ä: 18650, –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: Sony'},
            {'name': '–ó–∞—Ä—è–¥–∫–∞ –Ω–∞ 4x 18650', 'price_tenge': 2900, 'price_rub': 560, 'category': 'batteries', 'description': '–ó–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', 'specs': '–ù–∞ 4 –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ 18650, LCD –¥–∏—Å–ø–ª–µ–π, –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∞'},

            # –ù–∞—Å–∞–¥–∫–∏ (RTA)
            {'name': 'Zeus Z RTA', 'price_tenge': 9500, 'price_rub': 1900, 'category': 'tanks', 'description': '–û–±—ä–µ–º: 5.5ml', 'specs': '–î–∏–∞–º–µ—Ç—Ä: 26mm, –ú–∞—Ç–µ—Ä–∏–∞–ª: –Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è —Å—Ç–∞–ª—å, –û–±–¥—É–≤: Side airflow'},
            {'name': 'Zeus 2 RTA', 'price_tenge': 11000, 'price_rub': 2200, 'category': 'tanks', 'description': '–û–±—ä–µ–º: 5.5ml', 'specs': '–î–∏–∞–º–µ—Ç—Ä: 26mm, –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –î–≤–æ–π–Ω–æ–π –æ–±–¥—É–≤'},
            {'name': 'Zeus X Mesh RTA', 'price_tenge': 10000, 'price_rub': 2000, 'category': 'tanks', 'description': '–û–±—ä–µ–º: 4.5ml', 'specs': '–î–∏–∞–º–µ—Ç—Ä: 25mm, Mesh —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –û—Ç–ª–∏—á–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –≤–∫—É—Å–∞'},

            # –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ
            {'name': '–í–∞—Ç–∞ Cotton Bacon', 'price_tenge': 1500, 'price_rub': 300, 'category': 'accessories', 'description': '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –≤–∞—Ç–∞', 'specs': '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ö–ª–æ–ø–æ–∫, –û—Ç–ª–∏—á–Ω–æ–µ –≤–ø–∏—Ç—ã–≤–∞–Ω–∏–µ'},
            {'name': '–ö–æ–π–ª—ã (–Ω–∞–±–æ—Ä 48 —à—Ç)', 'price_tenge': 4000, 'price_rub': 800, 'category': 'accessories', 'description': '–ù–∞–±–æ—Ä –≥–æ—Ç–æ–≤—ã—Ö –∫–æ–π–ª–æ–≤', 'specs': '48 —à—Ç—É–∫ –≤ –Ω–∞–±–æ—Ä–µ, –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, –ö–∞–Ω—Ç–∞–ª A1'},

            # –ö–∞–ª—å—è–Ω—ã
            {'name': '–ö–∞–ª—å—è–Ω 50 —Å–º / 2 —Ç—Ä—É–±–∫–∏', 'price_tenge': 21900, 'price_rub': 4190, 'category': 'hookah', 'description': '–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç', 'specs': '–í—ã—Å–æ—Ç–∞: 50 —Å–º, 2 —Ç—Ä—É–±–∫–∏, —Ç–∞–±–∞–∫, —É–≥–æ–ª—å, –º—É–Ω–¥—à—Ç—É–∫–∏ –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ'},
            {'name': '–ö–∞–ª—å—è–Ω 29 —Å–º / 2 —Ç—Ä—É–±–∫–∏', 'price_tenge': 12990, 'price_rub': 2490, 'category': 'hookah', 'description': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç', 'specs': '–í—ã—Å–æ—Ç–∞: 29 —Å–º, 2 —Ç—Ä—É–±–∫–∏, —Ç–∞–±–∞–∫, —É–≥–æ–ª—å, –º—É–Ω–¥—à—Ç—É–∫–∏ –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ'},
            {'name': '–ê–≤—Ç–æ-–∫–∞–ª—å—è–Ω (–ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π)', 'price_tenge': 14500, 'price_rub': 2790, 'category': 'hookah', 'description': '–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π –∫–∞–ª—å—è–Ω', 'specs': '–î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —Ç–∞–±–∞–∫, —É–≥–æ–ª—å, —Ñ–æ–ª—å–≥–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ'},
            {'name': '–ü–ª–æ—Å–∫–∏–π –∫–∞–ª—å—è–Ω-–±–æ–∫—Å', 'price_tenge': 15900, 'price_rub': 3090, 'category': 'hookah', 'description': '–ö–∞–ª—å—è–Ω –≤ –±–æ–∫—Å–µ', 'specs': '–ü–ª–æ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω, —Ç–∞–±–∞–∫, —â–∏–ø—Ü—ã, —É–≥–æ–ª—å, –ø—É–ª—å—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏, –º—É–Ω–¥—à—Ç—É–∫–∏'},
            {'name': '–≠–ª–µ–∫—Ç—Ä–æ–ø–ª–∏—Ç–∫–∞ –¥–ª—è —É–≥–ª–µ–π', 'price_tenge': 7500, 'price_rub': 1450, 'category': 'plates', 'description': '–ú–æ—â–Ω–æ—Å—Ç—å: 1000W', 'specs': '–î–∏–∞–º–µ—Ç—Ä: 155 –º–º, –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –í—Ä–µ–º—è –Ω–∞–≥—Ä–µ–≤–∞: 3-5 –º–∏–Ω—É—Ç'},
        ]

        for product_data in products_data:
            product = Product(**product_data)
            db.session.add(product)

        db.session.commit()

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        create_admin_account()
        init_categories()
        init_products()
    app.run(host='0.0.0.0', port=5000, debug=True)
